@using Web.Models.View.User
@model DashboardView
@{
    ViewData["Title"] = "Dashboard | Pater";
    Layout = "_UserLayout";
}
@Html.Partial("_Header", Model.header)

<div class="my-10">
    <div class="my-6 mx-10">
        @if (ViewData["UnVerified"] != null)
        {
            <div role="alert" class="alert alert-warning">
                <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"/>
                </svg>
                <span>It seems you haven't verified your email. Click <a asp-action="VerificationRequest" class="link link-info">here</a> to receive Verification Mail.</span>
            </div>
        }
        <div role="alert" class="alert hidden" id="alert">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-info shrink-0 w-6 h-6">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <span id="alertMessage"></span>
        </div>
    </div>
    <div class="card w-auto mx-10 bg-base-200 shadow-xl  ">
        <div class="card-body">
            <div class="card-title">
                <h2>Links</h2>
                <div class="grow"></div>
                <button class="btn btn-primary" onclick="create.showModal()">Create</button>
            </div>
            <div class="flex items-center justify-center mx-3">
                @if (!Model.hasLinks)
                {
                    <span class="p-2">Nothing to show here</span>
                }
                else
                {
                    <div class="overflow-x-auto">
                        <table class="table table-sm lg:table-lg ">
                            <thead>
                            <tr>
                                <th>
                                    <label>
                                        <input type="checkbox" class="checkbox"/>
                                    </label>
                                </th>
                                <th colspan="3">
                                    <div class="join grid grid-cols-2 ">
                                        <button class="join-item btn btn-active" id="pagePrev">Previous page</button>
                                        <button class="join-item btn btn-active" id="pageNext">Next</button>
                                    </div>
                                </th>
                            </tr>
                            </thead>
                            <tbody id="links">
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<div class="hidden" id="toastAlert">
    <div id="toastAlertType">
        <span id="toastAlertText"></span>
    </div>
</div>

@* Modals *@
@* Create Link *@
<dialog id="create" class="modal modal-bottom sm:modal-middle">
    <div class="modal-box card">
        <form class="card-body" id="createLinkForm">
            <h2 class="card-title">Shorten a Link</h2>

            <div class="form-control mt-2">
                <input type="text" placeholder="Long Link" class="input input-bordered" id="newLink" required/>
            </div>

            <div class="form-control mt-2">
                <input type="text" placeholder="Name" class="input input-bordered" id="newLinkName"/>
            </div>

            <div class="form-control mt-2">
                <input type="text" placeholder="Custom Code" class="input input-bordered" id="newLinkCode" title="Spaces are not allowed" pattern="^\S*$"/>
            </div>

            <div class="form-control mt-6">
                <button class="btn btn-primary">Create</button>
            </div>
        </form>

        <div class="modal-action">
            <form method="dialog">
                <button class="btn">Close</button>
            </form>
        </div>
    </div>
</dialog>

@* Edit Link *@
<dialog id="editLink" class="modal modal-bottom sm:modal-middle">
    <div class="modal-box card">
        <form class="card-body" id="editLinkForm">
            <h2 class="card-title">Edit Link</h2>

            <div class="form-control mt-2">
                <input type="text" class="input input-bordered" id="editLinkCode" disabled/>
            </div>

            <div class="form-control mt-2">
                <input type="text" placeholder="New URL" class="input input-bordered" id="editLinkURL"/>
            </div>

            <div class="form-control mt-2">
                <input type="text" placeholder="New Name" class="input input-bordered" id="EditLinkName"/>
            </div>

            <div class="form-control mt-6">
                <button class="btn btn-primary">Save Edits</button>
            </div>
        </form>
        <div class="modal-action">
            <form method="dialog">
                <button class="btn">Close</button>
            </form>
        </div>
    </div>
</dialog>


<script>
    let pageNo = 1;
    const linkLists = document.querySelector("#links");

    const alert = document.querySelector("#alert");
    const alertMessage = document.querySelector("#alertMessage");
    
    const toastAlert = document.querySelector("#toastAlert");
    const toastAlertType= document.querySelector("#toastAlertType");
    const toastAlertText = document.querySelector("#toastAlertText");
    
    const createLinkModal = document.querySelector("#create");
    const editLinkModal = document.querySelector("#editLink");
    
    const createLinkForm = document.querySelector("#createLinkForm");
    createLinkForm.addEventListener("submit", async (e) => {
        e.preventDefault();
        createLinkModal.close();
        const link = document.querySelector("#newLink");
        const code = document.querySelector("#newLinkCode");
        const name = document.querySelector("#newLinkName");
    
        await fetch(`@Url.Action("CreateLink")`, {
            method : "POST",
            headers : new Headers({'Content-Type': 'application/json'}),
            body : JSON.stringify({
                LinkURL : link.value,
                LinkName: name.value,
                LinkCode: code.value
            }),
            credentials : "include"
        }).then(async (res) => {
            if (res.status === 200){
                alert.className = "alert alert-success";
                alertMessage.innerText = "Successfully Shorten the Link!"
                
                link.value = "";
                name.value = "";
                code.value = "";
                
                await GetLinks();
            }else {
                 alert.className = "alert alert-error";
                 const json = await res.json();
                 alertMessage.innerText = json.error;
            }
        }).catch(err =>{ 
            alert.className = "alert alert-error";
            alertMessage.innerHTML = "Unable to Create Link. Please try again later";
            console.log(err)
        })
        setTimeout(()=> {
            alert.className= "hidden";
            alertMessage.innerHTML = ""
            }, 5000);
    });
    
    const editLinkForm = document.querySelector("#editLinkForm");
    editLinkForm.addEventListener("submit", async (e) => {
        e.preventDefault();
        editLinkModal.close();
        
        const editLinkCode = document.querySelector("#editLinkCode");
        const editLinkURL = document.querySelector("#editLinkURL");
        const editLinkName = document.querySelector("#EditLinkName");
       
        await fetch("@Url.Action("EditLink")", {
            method : "PATCH",
            headers : new Headers({'Content-Type': 'application/json'}),
            body : JSON.stringify({
                LinkURL : editLinkURL.value,
                LinkName: editLinkName.value,
                LinkCode: editLinkCode.value
            })
        }).then(async (res) => {
            if (res.status === 200){
                toastAlert.className = "toast toast-center";
                toastAlertType.className = "alert alert-success"
                toastAlertText.innerText = "Successfully Updated the Link";
                await GetLinks();
            }else {
                toastAlert.className = "toast toast-center";
                toastAlertType.className = "alert alert-error";
                const json = await res.json();
                toastAlertText.innerText = json.error;
            }
        }).catch(err => {
                toastAlert.className = "toast toast-center";
                toastAlertType.className = "alert alert-error";
                toastAlertText.innerText = "Unable to Create Link. Please try again later";
                console.log(err);
        });
        setTimeout(()=> {
            toastAlert.className = "hidden";
            toastAlertType.className = "hidden";
            toastAlertText.innerText = "";
            }, 5000);
    });
    
    const pagePrev = document.querySelector("#pagePrev");
    pagePrev.addEventListener("click", async () => {
        if (pageNo === 1) return;
        pageNo--;
        await GetLinks();
    });
    
    const pageNext = document.querySelector("#pageNext");
    pageNext.addEventListener("click", async () => {
        pageNo++;
        await GetLinks();
    });
    
    function copyCode(code){
        // This wouldn't work on unsecure connection
        navigator.clipboard.writeText(window.location.origin+"/"+code).then(() => {
            toastAlert.className = "toast toast-center";
            toastAlertType.className = "alert alert-success"
            toastAlertText.innerText = "Successfully Copied Code to Clipboard";    
        }).catch((err) => {
            toastAlert.className = "toast toast-center";
            toastAlertType.className = "alert alert-error"
            toastAlertType.innerText = "Failed to Copy Code to Clipboard";
            console.log(err);
        })
        
        setTimeout(() => {
            toastAlert.className = "hidden"
            toastAlertType.className = "hidden";
            toastAlertText.innerHTML = "";
        }, 2000);
    }
    
    function editLink(code){
        const editLinkCode  = document.querySelector("#editLinkCode");
        const editLinkName = document.querySelector("#EditLinkName");
        const editLinkURL = document.querySelector("#editLinkURL");
        
        editLinkName.value = "";
        editLinkURL.value = "";
        editLinkCode.value = code;
        editLinkModal.showModal();
    }
    
    function deleteLink(code){
        const formData = new FormData();
        formData.append("code", code);
        
        fetch("@Url.Action("DeleteLink")", {
            method : "DELETE",
            body : formData
        }).then(async (res) => {
            if (res.status === 200){
                await GetLinks();
                toastAlert.className = "toast toast-center";
                toastAlertType.className = "alert alert-success"
                toastAlertText.innerText = "Successfully Deleted Link";
            }else {
                toastAlert.className = "toast toast-center";
                toastAlertType.className = "alert alert-error"
                const json = await res.json();
                toastAlertText.innerText = json.error; 
            }
        }).catch(err => {
            toastAlert.className = "toast toast-center";
            toastAlertType.className = "alert alert-error";
            toastAlertText.innerText = "Unable to Delete Link"; 
            console.error(err);
        });
        setTimeout(() => {
            toastAlert.className = "hidden"
            toastAlertType.className = "";
            toastAlertText.innerText = "";
            }, 2000);
    }
    
    
    async function GetLinks(){
        await fetch(`@Url.Action("GetLinks")?pageno=${pageNo}`).then(async (res) => {
            if (res.status === 200){
                linkLists.innerHTML = await res.text();
            }else {
                alert.className = "alert alert-error";
                const json = await res.json();
                alertMessage.innerText = json.error;
            }
        }).catch(err => {
            alert.className = "alert alert-error";
            alertMessage.innerText = "Unable to Fetch Links";
            console.error(err);
        });
        setTimeout(()=> {
            alert.className= "alert hidden";
            alertMessage.innerText = "";
          }, 5000);
    } 
    
    
    GetLinks();
</script>