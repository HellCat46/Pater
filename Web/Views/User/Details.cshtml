@using Web.Models.Account
@model Web.Models.View.User.DetailsView

@{
    ViewData["Title"] = "Details | Pater";
    Layout = "_UserLayout";
}

@await Html.PartialAsync("_Header", Model.header)

<div class="flex flex-col h-auto w-auto py-2 my-10 mx-5 gap-4 lg:mx-40">
    @if (ViewData["UnVerified"] != null)
    {
        <div role="alert" class="alert alert-warning">
            <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"/>
            </svg>
            <span>It seems you haven't verified your email. Click <a asp-action="VerificationRequest" class="link link-info">here</a> to receive Verification Mail.</span>
        </div>
    }
    @* Main Info Card *@
    <div class="flex flex-col bg-base-300 px-5 rounded-lg">
        <div class="flex flex-col lg:flex-row gap-4 py-5 items-center">
            <img src="https://t2.gstatic.com/faviconV2?client=SOCIAL&type=FAVICON&fallback_opts=TYPE,SIZE,URL&url=@Model.linkDetails.url&size=48" alt="favicon" id="LinkFavicon"/>
            <a class="text-4xl font-bold grow text-center lg:text-left" id="LinkName" href="@Model.linkDetails.url">@Model.linkDetails.name</a>
            <div class="btn" onclick="copyCode('@Model.linkDetails.code')">@Url.ActionContext.HttpContext.Request.Headers.Host/@Model.linkDetails.code</div>
            <div>
                <div class="btn btn-info" onclick="editLink('@Model.linkDetails.code')">Edit</div>
                <div class="btn btn-error" onclick="deleteLink('@Url.Action("DeleteLink")', '@Model.linkDetails.code')">Delete</div>
            </div>
        </div>
        <div class="divider divider-info"></div>
        <div class="flex flex-col items-center md:flex-row lg:flex-row pb-5 gap-4">
            <div class="form-control items-center w-full">
                <div class="label">
                    <span class="label-text">Last Updated:</span>
                </div>
                <input type="datetime-local" class="input input-bordered w-full max-w-xs" value="@Model.linkDetails.LastModified.ToString("yyyy'-'MM'-'dd'T'HH':'mm")" disabled/>
            </div>
            <div class="form-control items-center w-full">
                <div class="label">
                    <span class="label-text">Created At:</span>
                </div>
                <input type="datetime-local" class="input input-bordered w-full max-w-xs" id="createdAt" value="@Model.linkDetails.CreatedAt.ToString("yyyy'-'MM'-'dd'T'HH':'mm")" disabled/>
            </div>
        </div>
    </div>

    <div class="card w-auto bg-base-300">
        <div class="card-body">
            <h2 class="card-title">Duration For All Graphs</h2>

            <div class="flex flex-col items-center md:flex-row lg:flex-row pb-5 gap-4">
                <div class="form-control items-center w-full">
                    <div class="label">
                        <span class="label-text">From:</span>
                    </div>
                    <input type="date" class="input input-bordered w-full max-w-xs" id="graphDurationFrom"/>
                </div>
                @* Since datetime-local doesn't work on Firefox, No datetime-local at all :D *@
                <div class="form-control items-center w-full">
                    <div class="label">
                        <span class="label-text">To:</span>
                    </div>
                    <input type="date" class="input input-bordered w-full max-w-xs" id="graphDurationTo"/>
                </div>
            </div>
            <div class="card-actions justify-end">
                <button class="btn btn-primary" onclick="setAllGraphs()">Set Duration</button>
            </div>
        </div>
    </div>

    <div class="bg-base-200 flex flex-col p-5">
        <div class="flex">
            <span class="text-2xl font-bold">Visits Chart</span>
            <div class="grow"></div>
            <div class="dropdown dropdown-end">
                <div tabindex="0" role="button" class="btn btn-info">Export</div>
                <ul tabindex="0" class="dropdown-content z-[1] menu p-2 shadow bg-base-100 rounded-box w-52">
                    <li><a onclick="downloadGraph('VisitsChart')">As Image</a></li>
                    <li><a>As CSV</a></li>
                </ul>
            </div>
            
        </div>
        <canvas id="VisitsChart"></canvas>
        <div class="h-min flex flex-row-reverse gap-6 p-4">
            <div class="badge badge-info" onclick="VisitsChart('@Url.Action("LinkVisitDetails")', '@Model.linkDetails.code', 'lifetime')">Lifetime</div>
            <div class="badge badge-info" onclick="VisitsChart('@Url.Action("LinkVisitDetails")', '@Model.linkDetails.code', '30d')">30d</div>
            <div class="badge badge-info" onclick="VisitsChart('@Url.Action("LinkVisitDetails")', '@Model.linkDetails.code', '7d')">7d</div>
            <div class="badge badge-info" onclick="VisitsChart('@Url.Action("LinkVisitDetails")', '@Model.linkDetails.code', '24h')">24h</div>
        </div>
    </div>

    <div class="bg-base-200 flex flex-col p-5">
        <div class="flex">
            <span class="text-2xl font-bold">Browser Chart</span>
            <div class="grow"></div>
            <div class="dropdown dropdown-end">
                <div tabindex="0" role="button" class="btn btn-info">Export</div>
                <ul tabindex="0" class="dropdown-content z-[1] menu p-2 shadow bg-base-100 rounded-box w-52">
                    <li><a onclick="downloadGraph('BrowserChart')">As Image</a></li>
                    <li><a>As CSV</a></li>
                </ul>
            </div>
            
        </div>
        <canvas id="BrowserChart"></canvas>
        <div class="h-min flex flex-row-reverse gap-6 p-4">
            <div class="badge badge-info" onclick="BrowserChart('@Url.Action("LinkOtherDetails")', '@Model.linkDetails.code', 'lifetime')">Lifetime</div>
            <div class="badge badge-info" onclick="BrowserChart('@Url.Action("LinkOtherDetails")', '@Model.linkDetails.code', '30d')">30d</div>
            <div class="badge badge-info" onclick="BrowserChart('@Url.Action("LinkOtherDetails")', '@Model.linkDetails.code', '7d')">7d</div>
            <div class="badge badge-info" onclick="BrowserChart('@Url.Action("LinkOtherDetails")', '@Model.linkDetails.code', '24h')">24h</div>
        </div>
    </div>

    @* Device and OS Pie Charts *@
    <div class="bg-base-200 flex flex-col md:flex-row lg:flex-row gap-4 p-5">
        <div class="basis-1/2">
            <div class="flex">
                <span class="text-2xl font-bold">OS Chart</span>
                <div class="grow"></div>
                <div class="dropdown dropdown-end">
                  <div tabindex="0" role="button" class="btn btn-info">Export</div>
                  <ul tabindex="0" class="dropdown-content z-[1] menu p-2 shadow bg-base-100 rounded-box w-52">
                    <li><a onclick="downloadGraph('OSChart')">As Image</a></li>
                    <li><a>As CSV</a></li>
                  </ul>
                </div>
            </div>
            <canvas id="OSChart"></canvas>
            <div class="h-min flex flex-row-reverse gap-6 p-4">
                <div class="badge badge-info" onclick="OSChart('@Url.Action("LinkOtherDetails")', '@Model.linkDetails.code', 'lifetime')">Lifetime</div>
                <div class="badge badge-info" onclick="OSChart('@Url.Action("LinkOtherDetails")', '@Model.linkDetails.code', '30d')">30d</div>
                <div class="badge badge-info" onclick="OSChart('@Url.Action("LinkOtherDetails")', '@Model.linkDetails.code', '7d')">7d</div>
                <div class="badge badge-info" onclick="OSChart('@Url.Action("LinkOtherDetails")', '@Model.linkDetails.code', '24h')">24h</div>
            </div>
        </div>
        <div class="basis-1/2">
            <div class="flex">
                <span class="text-2xl font-bold">Device Chart</span>
                <div class="grow"></div>
                <div class="dropdown dropdown-end">
                  <div tabindex="0" role="button" class="btn btn-info">Export</div>
                  <ul tabindex="0" class="dropdown-content z-[1] menu p-2 shadow bg-base-100 rounded-box w-52">
                    <li><a onclick="downloadGraph('DeviceChart')">As Image</a></li>
                    <li><a>As CSV</a></li>
                  </ul>
                </div>
            </div>
            <canvas id="DeviceChart"></canvas>
            <div class="h-min flex flex-row-reverse gap-6 p-4">
                <div class="badge badge-info" onclick="DeviceChart('@Url.Action("LinkOtherDetails")', '@Model.linkDetails.code', 'lifetime')">Lifetime</div>
                <div class="badge badge-info" onclick="DeviceChart('@Url.Action("LinkOtherDetails")', '@Model.linkDetails.code', '30d')">30d</div>
                <div class="badge badge-info" onclick="DeviceChart('@Url.Action("LinkOtherDetails")', '@Model.linkDetails.code', '7d')">7d</div>
                <div class="badge badge-info" onclick="DeviceChart('@Url.Action("LinkOtherDetails")', '@Model.linkDetails.code', '24h')">24h</div>
            </div>
        </div>
    </div>

    <div class="bg-base-200 flex flex-col p-5">
        <div class="flex">
            <span class="text-2xl font-bold">Country Chart</span>
            <div class="grow"></div>
            <div class="dropdown dropdown-end">
                <div tabindex="0" role="button" class="btn btn-info">Export</div>
                <ul tabindex="0" class="dropdown-content z-[1] menu p-2 shadow bg-base-100 rounded-box w-52">
                    <li><a onclick="downloadGraph('CountryChart')">As Image</a></li>
                    <li><a>As CSV</a></li>
                </ul>
            </div>
        </div>
        <div class="flex flex-col lg:flex-row gap-4">
            <div class="basis-1/2">
                <canvas id="CountryChart"></canvas>
            </div>
            <div class="basis-1/2 overflow-y-auto bg-base-300">
                <table class="table table-xs">
                    <thead>
                    <th>Rank</th>
                    <th>Country</th>
                    <th>Visitors</th>
                    </thead>
                    <tbody id="CountryTable"></tbody>
                </table>
            </div>
        </div>
        <div class="h-min flex flex-row-reverse gap-6 p-4">
            <div class="badge badge-info" onclick="CountryChart('@Url.Action("LinkOtherDetails")', '@Model.linkDetails.code', 'lifetime')">Lifetime</div>
            <div class="badge badge-info" onclick="CountryChart('@Url.Action("LinkOtherDetails")', '@Model.linkDetails.code', '30d')">30d</div>
            <div class="badge badge-info" onclick="CountryChart('@Url.Action("LinkOtherDetails")', '@Model.linkDetails.code', '7d')">7d</div>
            <div class="badge badge-info" onclick="CountryChart('@Url.Action("LinkOtherDetails")', '@Model.linkDetails.code', '24h')">24h</div>
        </div>
    </div>

    <div class="bg-base-200 flex flex-col p-5">
        <div class="flex">
            <span class="text-2xl font-bold">City Chart</span>
            <div class="grow"></div>
            <div class="dropdown dropdown-end">
                <div tabindex="0" role="button" class="btn btn-info">Export</div>
                <ul tabindex="0" class="dropdown-content z-[1] menu p-2 shadow bg-base-100 rounded-box w-52">
                    <li><a onclick="downloadGraph('CityChart')">As Image</a></li>
                    <li><a>As CSV</a></li>
                </ul>
            </div>
        </div>
        <div class="flex flex-col lg:flex-row gap-4">
            <canvas class="basis-1/2" id="CityChart"></canvas>
            <div class="basis-1/2 overflow-y-auto bg-base-300">
                <table class="table table-xs">
                    <thead>
                    <th>Rank</th>
                    <th>Country</th>
                    <th>Visitors</th>
                    </thead>
                    <tbody id="CityTable"></tbody>
                </table>
            </div>
        </div>
        <div class="h-min flex flex-row-reverse gap-6 p-4">
            <div class="badge badge-info" onclick="CityChart('@Url.Action("LinkOtherDetails")', '@Model.linkDetails.code', 'lifetime')">Lifetime</div>
            <div class="badge badge-info" onclick="CityChart('@Url.Action("LinkOtherDetails")', '@Model.linkDetails.code', '30d')">30d</div>
            <div class="badge badge-info" onclick="CityChart('@Url.Action("LinkOtherDetails")', '@Model.linkDetails.code', '7d')">7d</div>
            <div class="badge badge-info" onclick="CityChart('@Url.Action("LinkOtherDetails")', '@Model.linkDetails.code', '24h')">24h</div>
        </div>
    </div>
</div>
<a id="downloadAnchor"></a>


@* Modals *@
@* Edit Link *@
<dialog id="editLink" class="modal modal-bottom sm:modal-middle">
    <div class="modal-box card">
        <form class="card-body" id="editLinkForm">
            <h2 class="card-title">Edit Link</h2>

            <div class="form-control mt-2">
                <input type="text" class="input input-bordered" id="editLinkCode" disabled/>
            </div>

            <div class="form-control mt-2">
                <input type="text" placeholder="New URL" class="input input-bordered" id="editLinkURL"/>
            </div>

            <div class="form-control mt-2">
                <input type="text" placeholder="New Name" class="input input-bordered" id="editLinkName"/>
            </div>

            <div class="form-control mt-6">
                <button class="btn btn-primary">Save Edits</button>
            </div>
        </form>
        <div class="modal-action">
            <form method="dialog">
                <button class="btn">Close</button>
            </form>
        </div>
    </div>
</dialog>


<div class="hidden" id="toastAlert">
    <div id="toastAlertType">
        <span id="toastAlertText"></span>
    </div>
</div>

<script src="~/js/User/Details.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    window.addEventListener("load", async () => {
        let duration;
        @if (Model.userPlan == AccountModel.Plan.Free)
        {
            <text>
                duration = "24h";
            </text>
        }
        else if (Model.userPlan == AccountModel.Plan.Premium)
        {
            <text>
                duration = "7d";
            </text>
        }
        else
        {
            <text>
                duration = "30d";
            </text>
        }
        await VisitsChart('@Url.Action("LinkVisitDetails")', "@Model.linkDetails.code", duration);
        await BrowserChart('@Url.Action("LinkOtherDetails")', "@Model.linkDetails.code", duration);
        await OSChart('@Url.Action("LinkOtherDetails")', "@Model.linkDetails.code", duration);
        await CountryChart('@Url.Action("LinkOtherDetails")', "@Model.linkDetails.code", duration);
        await CityChart('@Url.Action("LinkOtherDetails")', "@Model.linkDetails.code", duration);
        await DeviceChart('@Url.Action("LinkOtherDetails")', "@Model.linkDetails.code", duration);
    })
    
    async function setAllGraphs(){
        const graphDurationFrom = document.querySelector("#graphDurationFrom");
        const graphDurationTo = document.querySelector("#graphDurationTo");
        
        if (graphDurationFrom.value === "" || graphDurationTo.value === ""){
            toastAlert.className = "toast toast-center";
            toastAlertType.className = "alert alert-error";
            toastAlertText.innerText = "Both Duration Input Needs to be filled";
                    
            setTimeout(() => {
                toastAlert.className = "hidden"
                toastAlertType.className = "";
                toastAlertText.innerText = "";
            }, 2000);  
                    
            return;
        }
        
        await VisitsChart('@Url.Action("LinkVisitDetails")', "@Model.linkDetails.code", graphDurationFrom.value, graphDurationTo.value);
        await BrowserChart('@Url.Action("LinkOtherDetails")', "@Model.linkDetails.code", graphDurationFrom.value, graphDurationTo.value);
        await OSChart('@Url.Action("LinkOtherDetails")', "@Model.linkDetails.code", graphDurationFrom.value, graphDurationTo.value);
        await CountryChart('@Url.Action("LinkOtherDetails")', "@Model.linkDetails.code", graphDurationFrom.value, graphDurationTo.value);
        await CityChart('@Url.Action("LinkOtherDetails")', "@Model.linkDetails.code", graphDurationFrom.value, graphDurationTo.value);
        await DeviceChart('@Url.Action("LinkOtherDetails")', "@Model.linkDetails.code", graphDurationFrom.value, graphDurationTo.value);
        
        toastAlert.className = "toast toast-center";
        toastAlertType.className = "alert alert-success"
        toastAlertText.innerText = "Updated Duration of All the Graphs";
        
        setTimeout(() => {
            toastAlert.className = "hidden"
            toastAlertType.className = "";
            toastAlertText.innerText = "";
        }, 2000);        
    }
    
    const editLinkForm = document.querySelector("#editLinkForm");
    editLinkForm.addEventListener("submit", async (e) => {
        e.preventDefault();
        await editLinkSubmit("@Url.Action("EditLink")")
    });
</script>