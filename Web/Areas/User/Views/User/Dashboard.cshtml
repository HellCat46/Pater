@using Web.Models.View.User
@model DashboardView
@{
    ViewData["Title"] = "Dashboard | Pater";
    Layout = "_UserLayout";
}
@await Html.PartialAsync("_Header", Model.header)

<div class="my-10">
    <div class="my-6 mx-10">
        @if (ViewData["UnVerified"] != null)
        {
            <div role="alert" class="alert alert-warning">
                <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"/>
                </svg>
                <span>It seems you haven't verified your email. Click <a asp-action="VerificationRequest" href="@Url.ActionLink("VerificationRequest", "User" )" class="link link-info">here</a> to receive Verification Mail.</span>
            </div>
        }
        <div role="alert" class="alert hidden" id="alert">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-info shrink-0 w-6 h-6">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <span id="alertMessage"></span>
        </div>
    </div>
    <div class="card w-auto mx-5 lg:mx-15 bg-base-200 shadow-xl  ">
        <div class="card-body">
            <div class="card-title">
                <h2>Links</h2>
                <div class="grow"></div>
                <button class="btn btn-primary" onclick="create.showModal()">Create</button>
            </div>
            <div class="flex items-center justify-center">
                @if (!Model.hasLinks)
                {
                    <span class="p-2">Nothing to show here</span>
                }
                else
                {
                    <div class="w-max">
                        <table class="table table-sm lg:table-lg ">
                            <thead>
                            <tr>
                                <th>
                                    <label>
                                        <input type="checkbox" class="checkbox" id="selectAllLinks"/>
                                    </label>
                                </th>
                                <th colspan="3">
                                    <div class="join grid grid-cols-2 gap-4">
                                        <button class="join-item btn btn-active" onclick="prevPage()">Prev</button>
                                        <button class="join-item btn btn-active" onclick="nextPage()">Next</button>
                                    </div>
                                </th>
                            </tr>
                            </thead>
                            <tbody id="links">
                            </tbody>
                        </table>
                        </div>
                }
            </div>
        </div>
    </div>
</div>

<div class="hidden" id="toastAlert">
    <div id="toastAlertType">
        <span id="toastAlertText"></span>
    </div>
</div>

<div class="hidden" id="linkSelToast">
    <div class="alert alert-info">
        <span>Do you want to delete all the selected links?</span>
        <button class="btn btn-error" onclick="deleteSelectedLinks('@Url.Action("DeleteMultipleLink", "Api")')">Delete</button>
    </div>
</div>


@* Modals *@
@* Create Link *@
<dialog id="create" class="modal modal-bottom sm:modal-middle">
    <div class="modal-box card">
        <form class="card-body" id="createLinkForm">
            <h2 class="card-title">Shorten a Link</h2>

            <div class="form-control mt-2">
                <input type="text" placeholder="Long Link" class="input input-bordered" id="newLink" required/>
            </div>

            <div class="form-control mt-2">
                <input type="text" placeholder="Name" class="input input-bordered" id="newLinkName"/>
            </div>

            <div class="form-control mt-2">
                <input type="text" placeholder="Custom Code" class="input input-bordered" id="newLinkCode" title="Spaces are not allowed" pattern="^\S*$"/>
            </div>

            <div class="form-control mt-6">
                <button class="btn btn-primary">Create</button>
            </div>
        </form>

        <div class="modal-action">
            <form method="dialog">
                <button class="btn">Close</button>
            </form>
        </div>
    </div>
</dialog>

@* Edit Link *@
<dialog id="editLink" class="modal modal-bottom sm:modal-middle">
    <div class="modal-box card">
        <form class="card-body" id="editLinkForm">
            <h2 class="card-title">Edit Link</h2>

            <div class="form-control mt-2">
                <input type="text" class="input input-bordered" id="editLinkCode" disabled/>
            </div>

            <div class="form-control mt-2">
                <input type="text" placeholder="New URL" class="input input-bordered" id="editLinkURL"/>
            </div>

            <div class="form-control mt-2">
                <input type="text" placeholder="New Name" class="input input-bordered" id="EditLinkName"/>
            </div>

            <div class="form-control mt-6">
                <button class="btn btn-primary">Save Edits</button>
            </div>
        </form>
        <div class="modal-action">
            <form method="dialog">
                <button class="btn">Close</button>
            </form>
        </div>
    </div>
</dialog>

<script src="~/js/User/Dashboard.js"></script>

<script>
    function deleteLink(code){
       deleteLinkRequest("@Url.Action("DeleteLink", "Api")", code)
    }
    
    const createLinkForm = document.querySelector("#createLinkForm");
    createLinkForm.addEventListener("submit", async (e) => {
        e.preventDefault();
        await createLinkSubmit('@Url.Action("CreateLink", "Api")')
    });
    
    const editLinkForm = document.querySelector("#editLinkForm");
    editLinkForm.addEventListener("submit", async (e) => {
        e.preventDefault();
        await editLinkSubmit('@Url.Action("EditLink", "Api")');
    });
    
    GetLinks("@Url.Action("GetLinks", "Api")");
</script>